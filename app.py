import os
os.environ["PORT"] = os.getenv("PORT", "8501")

import streamlit as st
import io
import pandas as pd

# Importa as fun√ß√µes dos seus m√≥dulos da pipeline
from pipeline.propriedades import analisar_peptideo
from pipeline.simulador import simular_crescimento_streamlit
# --- NOSSA NOVA IMPORTA√á√ÉO ---
from pipeline.membrana import analisar_interacao_pdb

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="PeptiTools", layout="wide")

# Inicializa√ß√£o do estado da sess√£o para todas as vari√°veis
if 'page' not in st.session_state:
    st.session_state['page'] = 'home'
if 'figura' not in st.session_state:
    st.session_state['figura'] = None
if 'dados_simulacao' not in st.session_state:
    st.session_state['dados_simulacao'] = None
if 'graficos_membrana' not in st.session_state:
    st.session_state['graficos_membrana'] = None

# ==========================
# MENU LATERAL (SIDEBAR)
# ==========================
st.sidebar.title("Navega√ß√£o")
# --- Menu com a nova p√°gina integrada ---
pagina_selecionada = st.sidebar.radio(
    "Escolha a An√°lise:",
    ["üè† Home", "üß¨ An√°lise de Sequ√™ncia", "üî¨ An√°lise de Membrana", "‚ùì Ajuda", "‚ÑπÔ∏è Sobre"]
)

# Mapeia a sele√ß√£o do r√°dio para o nome interno da p√°gina
mapa_paginas = {
    "üè† Home": "home",
    "üß¨ An√°lise de Sequ√™ncia": "simulador", # Mantive o nome interno 'simulador'
    "üî¨ An√°lise de Membrana": "membrana",
    "‚ùì Ajuda": "ajuda",
    "‚ÑπÔ∏è Sobre": "sobre"
}
# Atualiza a p√°gina no estado da sess√£o sem causar um rerun imediato
if st.session_state['page'] != mapa_paginas[pagina_selecionada]:
    st.session_state['page'] = mapa_paginas[pagina_selecionada]
    # Limpa os resultados antigos ao trocar de p√°gina de an√°lise
    st.session_state['figura'] = None
    st.session_state['dados_simulacao'] = None
    st.session_state['graficos_membrana'] = None
    st.experimental_rerun()

# ==========================
# FUN√á√ÉO DE RODAP√â
# ==========================
def mostrar_rodape():
    st.markdown("---")
    st.markdown("### üîß Apoio institucional:")
    # Use st.columns para evitar que o rodap√© seja muito largo no layout "wide"
    gap1, col1, col2, col3, gap2 = st.columns([1, 0.5, 0.5, 0.5, 1])
    with col1:
        st.image("logo.png", width=90, caption="Laborat√≥rio")
    with col2:
        st.image("ufms.png", width=90, caption="UFMS")
    with col3:
        st.image("PMBqBM.png", width=90, caption="PMBqBM")

# ====================================================================
# L√ìGICA DAS P√ÅGINAS
# ====================================================================

# --- P√ÅGINA HOME ---
if st.session_state['page'] == 'home':
    if os.path.exists("logo.png"):
        st.image("logo.png", width=120)
    st.title("PeptiTools: Plataforma Integrada de An√°lise de Pept√≠deos")
    st.markdown("""
    Bem-vindo ao **PeptiTools**! Uma aplica√ß√£o para acelerar a descoberta e an√°lise de pept√≠deos com potencial antimicrobiano.
    
    ### Ferramentas Dispon√≠veis:
    Use o menu na barra lateral para navegar entre as an√°lises:
    
    - **üß¨ An√°lise de Sequ√™ncia:** Calcule propriedades f√≠sico-qu√≠micas e simule o impacto da inibi√ß√£o de um alvo espec√≠fico (DNA-girase) no crescimento da *E. coli*.
    - **üî¨ An√°lise de Membrana:** Fa√ßa o upload de uma estrutura 3D (PDB) e visualize a energia de intera√ß√£o do seu pept√≠deo com um modelo de membrana.
    """)
    if st.button("üî¨ Iniciar An√°lise"):
        # Navega para a primeira p√°gina de an√°lise
        st.session_state['page'] = 'simulador'
        st.experimental_rerun()
    mostrar_rodape()

# --- P√ÅGINA DE AN√ÅLISE DE SEQU√äNCIA (O SEU SIMULADOR ORIGINAL) ---
elif st.session_state['page'] == 'simulador':
    st.title("üß¨ An√°lise de Sequ√™ncia e Inibi√ß√£o de Alvo")
    seq = st.text_input("Digite a sequ√™ncia do pept√≠deo (ex: KLFKFFKFFK):", key="seq_input")
    if seq:
        try:
            props = analisar_peptideo(seq)
            st.subheader("üìä Propriedades f√≠sico-qu√≠micas")
            st.write(f"**Carga l√≠quida:** {props['carga']}")
            st.write(f"**Hidrofobicidade m√©dia:** {props['hidrofobicidade']}")
            st.write(f"**Estabilidade extracelular:** {props['estabilidade_extracelular']}")
            st.write(f"**Permeabilidade membrana externa:** {props['permeabilidade_membrana_externa']}")
            st.write(f"**Transloca√ß√£o membrana citoplasm√°tica:** {props['translocacao_membrana_citoplasmatica']}")
            st.write(f"**Pontua√ß√£o combinada (0 a 1):** {props['pontuacao_combinada']}")

            st.subheader("üß™ Par√¢metro de Docking (vs. DNA-girase)")
            kd_M = st.number_input("Informe o Kd (em M):", min_value=1e-12, format="%.2e", key="kd_input")
            kd_uM = kd_M * 1e6
            st.write(f"Isso equivale a **{kd_uM:.2f} ¬µM**")
            comparar = st.checkbox("Comparar com √°cido nalid√≠xico (Kd = 1.3 ¬µM)?")

            if st.button("Simular impacto metab√≥lico"):
                if kd_M == 0.0:
                    st.warning("Por favor, insira um valor de Kd maior que zero.")
                else:
                    with st.spinner("‚è≥ Calculando..."):
                        try:
                            fig, df_resultado = simular_crescimento_streamlit(kd_uM, comparar)
                            st.session_state['figura'] = fig
                            st.session_state['dados_simulacao'] = df_resultado
                            st.session_state['page'] = 'resultado'
                            st.experimental_rerun()
                        except Exception as e:
                            st.error(f"‚ùå Erro durante a simula√ß√£o:\n\n{e}")
        except Exception as e:
            st.error(f"‚ùå Erro na an√°lise do pept√≠deo:\n\n{e}")
    mostrar_rodape()

# --- P√ÅGINA DE AN√ÅLISE DE MEMBRANA (A NOSSA NOVA P√ÅGINA) ---
elif st.session_state['page'] == 'membrana':
    st.title("üî¨ An√°lise de Intera√ß√£o com a Membrana")
    st.markdown("Fa√ßa o upload de uma estrutura 3D de pept√≠deo (`.pdb`) para calcular e visualizar a energia de intera√ß√£o com um modelo de membrana simplificado.")
    
    pdb_file = st.file_uploader("Escolha o seu arquivo PDB", type=["pdb", "ent"], key="pdb_uploader")

    if pdb_file is not None:
        if st.button("Analisar Intera√ß√£o com Membrana"):
            with st.spinner("Calculando energias... Por favor, aguarde."):
                try:
                    # Chama nossa nova fun√ß√£o do m√≥dulo membrana.py
                    g1_path, g2_path = analisar_interacao_pdb(pdb_file)
                    st.session_state['graficos_membrana'] = [g1_path, g2_path]
                except Exception as e:
                    st.error(f"‚ùå Erro durante a an√°lise da membrana:\n\n{e}")

    # Mostra os gr√°ficos se eles existirem no estado da sess√£o
    if st.session_state['graficos_membrana']:
        st.subheader("Resultados da An√°lise de Energia")
        st.image(st.session_state['graficos_membrana'][0], caption="Energia por √Åtomo vs Profundidade na Membrana", use_column_width=True)
        st.image(st.session_state['graficos_membrana'][1], caption="Energia M√©dia por Res√≠duo", use_column_width=True)
        
        if st.button("Analisar Outro Pept√≠deo"):
            st.session_state['graficos_membrana'] = None
            st.experimental_rerun()
            
    mostrar_rodape()

# --- P√ÅGINA DE RESULTADO (da simula√ß√£o original) ---
elif st.session_state['page'] == 'resultado':
    st.subheader("üìà Simula√ß√£o do crescimento bacteriano")
    fig = st.session_state['figura']
    if fig:
        st.pyplot(fig)
        buf = io.BytesIO()
        fig.savefig(buf, format="png")
        buf.seek(0)
        st.download_button("üì• Baixar gr√°fico", data=buf, file_name="grafico_simulacao.png", mime="image/png")

    if st.session_state['dados_simulacao'] is not None:
        csv_buf = io.StringIO()
        st.session_state['dados_simulacao'].to_csv(csv_buf, index=False)
        st.download_button(label="üì• Baixar dados (.csv)", data=csv_buf.getvalue(), file_name="dados_simulacao.csv", mime="text/csv")

    if st.button("‚¨ÖÔ∏è Voltar ao Simulador"):
        st.session_state['page'] = 'simulador'
        st.session_state['figura'] = None
        st.session_state['dados_simulacao'] = None
        st.experimental_rerun()
    mostrar_rodape()

# --- P√ÅGINA DE AJUDA ---
   elif st.session_state['page'] == 'ajuda':
    st.title("‚ùì Como usar")
    st.markdown("""
    ### Etapas:
    1. Digite a sequ√™ncia do pept√≠deo (ex: KLFKFFKFFK)
    2. Informe o valor de Kd (constante de dissocia√ß√£o), que pode ser obtido via         [**PRODIGY**](https://bianca.science.uu.nl/prodigy/):
        - Fa√ßa docking entre o pept√≠deo e a DNA-girase
        - Submeta a estrutura ao PRODIGY para estimar o Kd

    3. Marque se deseja comparar com o √°cido nalid√≠xico
    4. Clique em **Simular impacto metab√≥lico**

    ### Sobre as pontua√ß√µes:
    - **Pontua√ß√£o combinada:** Integra estabilidade extracelular, permeabilidade e transloca√ß√£o
    - Valores mais altos (pr√≥ximos de 1) indicam maior potencial antimicrobiano
    """)

    mostrar_rodape()

# --- P√ÅGINA SOBRE ---
   elif st.session_state['page'] == 'sobre':
    st.title("‚ÑπÔ∏è Sobre o projeto")
    st.markdown("""
    Desenvolvido por J√©ssica Carretone  
    Sob orienta√ß√£o do Prof. Dr. Malson Lucena

    Esta aplica√ß√£o integra bioinform√°tica estrutural e simula√ß√µes metab√≥licas
    para prever o potencial antimicrobiano de pept√≠deos.

    ### Tecnologias utilizadas:
    - Python, Streamlit
    - Modelagem metab√≥lica com **COBRApy** e o modelo **iML1515**
    - An√°lises f√≠sico-qu√≠micas e docking molecular

    C√≥digo-fonte dispon√≠vel em breve no GitHub.
    """)
    mostrar_rodape()

